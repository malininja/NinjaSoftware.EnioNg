///////////////////////////////////////////////////////////////
// This is generated code. 
//////////////////////////////////////////////////////////////
// Code is generated using LLBLGen Pro version: <[LLBLGenVersion]>
// Code is generated using templates: <[TemplateName]>
// Templates vendor: Solutions Design.
// Templates version: <[TemplateVersion]>
//////////////////////////////////////////////////////////////
using System;
using System.Data;
using SD.LLBLGen.Pro.ORMSupportClasses;

namespace <[RootNamespace]><[DbSpecificNamespaceSuffix]>
{
	/// <summary>Class which contains the static logic to execute retrieval stored procedures in the database.</summary>
	public static partial class RetrievalProcedures
	{
<[Foreach TypedView MappedOnResultset CrLf]>
		/// <summary>Gets the SP Call using query for fetching the <[CurrentTypedViewName]> TypedView.</summary>
<[If HasParameter NoCursors]><[Foreach Parameter NoCursors CrLf]>		/// <param name="<[CaseCamel CurrentParameterName]>"><[CurrentParameterDirection]> parameter of stored procedure</param><[NextForeach]>
<[EndIf]>		/// <returns>ready to use IRetrievalQuery instance for fetching the typedview</returns>
		/// <remarks>Output parameters are not set after query is executed</remarks>
		public static IRetrievalQuery GetQueryFor<[CurrentTypedViewName]>TypedView(<[Foreach InputParameter Comma]><[If IsNullable]><[If IsValueType]>Nullable<<[TypeOfParameter]>><[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]> <[CaseCamel CurrentParameterName]><[NextForeach]><[If HasInputAndOutputParameters NoCursors]>, <[EndIf]><[Foreach OutputParameter NoCursors Comma]>ref <[If IsNullable]><[If IsValueType]>Nullable<<[TypeOfParameter]>><[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]> <[CaseCamel CurrentParameterName]><[NextForeach]>)
		{
			IRetrievalQuery query = Get<[CurrentSPCallName]>CallAsQuery(<[Foreach InputParameter Comma]><[CaseCamel CurrentParameterName]><[NextForeach]><[If HasInputAndOutputParameters NoCursors]>, <[EndIf]><[Foreach OutputParameter NoCursors Comma]>ref <[CaseCamel CurrentParameterName]><[NextForeach]>);
			query.ResultsetNumber = <[ResultsetNumber]>;
			return query;
		}
		
		/// <summary>Fetches the typed view '<[CurrentTypedViewName]>' using a stored procedure call. </summary>
		/// <param name="typedViewToFetch">The typed view to fetch. Should be a '<[CurrentTypedViewName]>TypedView' instance</param>
<[If HasParameter NoCursors]><[Foreach Parameter NoCursors CrLf]>		/// <param name="<[CaseCamel CurrentParameterName]>"><[CurrentParameterDirection]> parameter of stored procedure</param><[NextForeach]>
<[EndIf]>		/// <returns> The specified TypedView to fetch</returns>
		public static TTypedView Fetch<[CurrentTypedViewName]>TypedView<TTypedView>(TTypedView typedViewToFetch<[If HasParameter NoCursors]>, <[EndIf]><[Foreach InputParameter Comma]><[If IsNullable]><[If IsValueType]>Nullable<<[TypeOfParameter]>><[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]> <[CaseCamel CurrentParameterName]><[NextForeach]><[If HasInputAndOutputParameters NoCursors]>, <[EndIf]><[Foreach OutputParameter NoCursors Comma]>ref <[If IsNullable]><[If IsValueType]>Nullable<<[TypeOfParameter]>><[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]> <[CaseCamel CurrentParameterName]><[NextForeach]>)
			where TTypedView: ITypedView2 
		{
			using(DataAccessAdapter adapter = new DataAccessAdapter())
			{
				Fetch<[CurrentTypedViewName]>TypedView(adapter, typedViewToFetch<[If HasParameter NoCursors]>, <[EndIf]><[Foreach InputParameter Comma]><[CaseCamel CurrentParameterName]><[NextForeach]><[If HasInputAndOutputParameters NoCursors]>, <[EndIf]><[Foreach OutputParameter NoCursors Comma]>ref <[CaseCamel CurrentParameterName]><[NextForeach]>);
			}
			return typedViewToFetch;
		}

		/// <summary>Fetches the typed view '<[CurrentTypedViewName]>' using a stored procedure call. </summary>
		/// <param name="adapter">The adapter.</param>
		/// <param name="typedViewToFetch">The typed view to fetch. Should be a '<[CurrentTypedViewName]>TypedView' instance</param>
<[If HasParameter NoCursors]><[Foreach Parameter NoCursors CrLf]>		/// <param name="<[CaseCamel CurrentParameterName]>"><[CurrentParameterDirection]> parameter of stored procedure</param><[NextForeach]>
<[EndIf]>		public static void Fetch<[CurrentTypedViewName]>TypedView(IDataAccessAdapter adapter, ITypedView2 typedViewToFetch<[If HasParameter NoCursors]>, <[EndIf]><[Foreach InputParameter Comma]><[If IsNullable]><[If IsValueType]>Nullable<<[TypeOfParameter]>><[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]> <[CaseCamel CurrentParameterName]><[NextForeach]><[If HasInputAndOutputParameters NoCursors]>, <[EndIf]><[Foreach OutputParameter NoCursors Comma]>ref <[If IsNullable]><[If IsValueType]>Nullable<<[TypeOfParameter]>><[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]> <[CaseCamel CurrentParameterName]><[NextForeach]>)
		{
			StoredProcedureCall call = Create<[CurrentSPCallName]>Call(adapter<[If HasParameter NoCursors]>, <[EndIf]><[Foreach InputParameter Comma]><[CaseCamel CurrentParameterName]><[NextForeach]><[If HasInputAndOutputParameters NoCursors]>, <[EndIf]><[Foreach OutputParameter NoCursors Comma]><[CaseCamel CurrentParameterName]><[NextForeach]>);
			IRetrievalQuery query = call.ToRetrievalQuery();
			query.ResultsetNumber = <[ResultsetNumber]>;
			adapter.FetchTypedView(typedViewToFetch, query);<[Foreach OutputParameter NoCursors]>
<[If HasTypeConverterDefined]>			<[CaseCamel CurrentParameterName]> = (<[If IsNullable]><[If IsValueType]>Nullable<<[TypeOfParameter]>><[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]>)new <[TypeConverterFullName]>().ConvertFrom(call.GetParameterValue<<[If IsNullable]><[If IsValueType]>Nullable<<[TypeOfMappedTargetField]>><[Else]><[TypeOfMappedTargetField]><[EndIf]><[Else]><[TypeOfMappedTargetField]><[EndIf]>>(<[ParameterIndex]>));<[Else]>			<[CaseCamel CurrentParameterName]> = call.GetParameterValue<<[If IsNullable]><[If IsValueType]>Nullable<<[TypeOfParameter]>><[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]>>(<[ParameterIndex]>);<[EndIf]><[NextForeach]>
		}<[NextForeach]>

<[Foreach RetrievalStoredProcedureCall CrLf]>
		/// <summary>Calls stored procedure '<[ActualStoredProcedureName]>'.<br/><br/><[Foreach CustomProperty RetrievalStoredProcedureCall]>
		/// <[CustomPropertyName]>: <[CustomPropertyValue]><br/><[NextForeach]></summary>
<[If HasParameter NoCursors]><[Foreach Parameter NoCursors CrLf]>		/// <param name="<[CaseCamel CurrentParameterName]>"><[CurrentParameterDirection]> parameter. <[Description]></param><[NextForeach]>
<[EndIf]>		/// <returns>Filled <[ProcedureOutputType]> with resultset(s) of stored procedure</returns>
		public static <[ProcedureOutputType]> <[CurrentSPCallName]>(<[Foreach InputParameter Comma]><[If IsNullable]><[If IsValueType]>Nullable<<[TypeOfParameter]>><[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]> <[CaseCamel CurrentParameterName]><[NextForeach]><[If HasInputAndOutputParameters NoCursors]>, <[EndIf]><[Foreach OutputParameter NoCursors Comma]>ref <[If IsNullable]><[If IsValueType]>Nullable<<[TypeOfParameter]>><[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]> <[CaseCamel CurrentParameterName]><[NextForeach]>)
		{
			using(DataAccessAdapter dataAccessProvider = new DataAccessAdapter())
			{
				return <[CurrentSPCallName]>(<[Foreach InputParameter Comma]><[CaseCamel CurrentParameterName]><[NextForeach]><[If HasInputAndOutputParameters NoCursors]>, <[EndIf]><[Foreach OutputParameter NoCursors Comma]>ref <[CaseCamel CurrentParameterName]><[NextForeach]><[If HasParameter NoCursors]>, <[EndIf]>dataAccessProvider);
			}
		}

		/// <summary>Calls stored procedure '<[ActualStoredProcedureName]>'.<br/><br/><[Foreach CustomProperty RetrievalStoredProcedureCall]>
		/// <[CustomPropertyName]>: <[CustomPropertyValue]><br/><[NextForeach]></summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
<[If HasParameter NoCursors]><[Foreach Parameter NoCursors CrLf]>		/// <param name="<[CaseCamel CurrentParameterName]>"><[CurrentParameterDirection]> parameter. <[Description]></param><[NextForeach]>
<[EndIf]>		/// <returns>Filled <[ProcedureOutputType]> with resultset(s) of stored procedure</returns>
		public static <[ProcedureOutputType]> <[CurrentSPCallName]>(<[Foreach InputParameter Comma]><[If IsNullable]><[If IsValueType]>Nullable<<[TypeOfParameter]>><[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]> <[CaseCamel CurrentParameterName]><[NextForeach]><[If HasInputAndOutputParameters NoCursors]>, <[EndIf]><[Foreach OutputParameter NoCursors Comma]>ref <[If IsNullable]><[If IsValueType]>Nullable<<[TypeOfParameter]>><[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]> <[CaseCamel CurrentParameterName]><[NextForeach]><[If HasParameter NoCursors]>, <[EndIf]>IDataAccessCore dataAccessProvider)
		{
			using(StoredProcedureCall call = Create<[CurrentSPCallName]>Call(dataAccessProvider<[If HasParameter NoCursors]>, <[EndIf]><[Foreach InputParameter Comma]><[CaseCamel CurrentParameterName]><[NextForeach]><[If HasInputAndOutputParameters NoCursors]>, <[EndIf]><[Foreach OutputParameter NoCursors Comma]><[CaseCamel CurrentParameterName]><[NextForeach]>))
			{
				<[ProcedureOutputType]> toReturn = call.Fill<[ProcedureOutputType]>();<[Foreach OutputParameter NoCursors]>
<[If HasTypeConverterDefined]>				<[CaseCamel CurrentParameterName]> = (<[If IsNullable]><[If IsValueType]>Nullable<<[TypeOfParameter]>><[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]>)new <[TypeConverterFullName]>().ConvertFrom(call.GetParameterValue<<[If IsNullable]><[If IsValueType]>Nullable<<[TypeOfMappedTargetField]>><[Else]><[TypeOfMappedTargetField]><[EndIf]><[Else]><[TypeOfMappedTargetField]><[EndIf]>>(<[ParameterIndex]>));<[Else]>				<[CaseCamel CurrentParameterName]> = call.GetParameterValue<<[If IsNullable]><[If IsValueType]>Nullable<<[TypeOfParameter]>><[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]>>(<[ParameterIndex]>);<[EndIf]><[NextForeach]>
				return toReturn;
			}
		}

		/// <summary>Creates an IRetrievalQuery object for a call to the procedure '<[ActualStoredProcedureName]>'.<[Foreach CustomProperty RetrievalStoredProcedureCall]>
		/// <[CustomPropertyName]>: <[CustomPropertyValue]><br/><[NextForeach]></summary>
<[If HasParameter NoCursors]><[Foreach Parameter NoCursors CrLf]>		/// <param name="<[CaseCamel CurrentParameterName]>"><[CurrentParameterDirection]> parameter of stored procedure</param><[NextForeach]>
<[EndIf]>		/// <returns>IRetrievalQuery object which is ready to use for datafetching</returns>
		public static IRetrievalQuery Get<[CurrentSPCallName]>CallAsQuery(<[Foreach InputParameter Comma]><[If IsNullable]><[If IsValueType]>Nullable<<[TypeOfParameter]>><[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]> <[CaseCamel CurrentParameterName]><[NextForeach]><[If HasInputAndOutputParameters NoCursors]>, <[EndIf]><[Foreach OutputParameter NoCursors Comma]>ref <[If IsNullable]><[If IsValueType]>Nullable<<[TypeOfParameter]>><[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]> <[CaseCamel CurrentParameterName]><[NextForeach]>)
		{
			using(DataAccessAdapter dataAccessProvider = new DataAccessAdapter())
			{
				return Create<[CurrentSPCallName]>Call(dataAccessProvider<[If HasParameter NoCursors]>, <[EndIf]><[Foreach InputParameter Comma]><[CaseCamel CurrentParameterName]><[NextForeach]><[If HasInputAndOutputParameters NoCursors]>, <[EndIf]><[Foreach OutputParameter NoCursors Comma]><[CaseCamel CurrentParameterName]><[NextForeach]>).ToRetrievalQuery();
			}
		}<[NextForeach]>

<[Foreach RetrievalStoredProcedureCall]><# SD_ProceduresIncludeTemplate #>
<[NextForeach]>
		#region Included Code
<# Custom_RetrievalProceduresAdapterTemplate #>
		#endregion
	}
}
