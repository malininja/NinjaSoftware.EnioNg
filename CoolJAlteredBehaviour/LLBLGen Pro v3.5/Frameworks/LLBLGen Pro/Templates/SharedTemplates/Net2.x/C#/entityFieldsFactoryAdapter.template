///////////////////////////////////////////////////////////////
// This is generated code. 
//////////////////////////////////////////////////////////////
// Code is generated using LLBLGen Pro version: <[LLBLGenVersion]>
// Code is generated using templates: <[TemplateName]>
// Templates vendor: Solutions Design.
// Templates version: <[TemplateVersion]>
//////////////////////////////////////////////////////////////
using System;
using <[RootNamespace]>;
using <[RootNamespace]>.HelperClasses;
using System.Collections.Generic;
using SD.LLBLGen.Pro.ORMSupportClasses;

namespace <[RootNamespace]>.FactoryClasses
{
	/// <summary>Generates IEntityFields2 instances for different kind of Entities.</summary>
	public static <[If UsePartialClasses]>partial <[EndIf]>class EntityFieldsFactory
	{
<[If HasEntity]>		private static readonly Dictionary<<[RootNamespace]>.EntityType, string> _entityTypeNamesCache = new Dictionary<<[RootNamespace]>.EntityType, string>();

		/// <summary>static ctor which initializes the static entity type cache.</summary>
		static EntityFieldsFactory()
		{
			foreach(<[RootNamespace]>.EntityType value in Enum.GetValues(typeof(<[RootNamespace]>.EntityType)))
			{
				_entityTypeNamesCache.Add(value, Enum.GetName(typeof(<[RootNamespace]>.EntityType), value));
			}
		}	

		/// <summary>General factory entrance method which will return an EntityFields2 object with the format generated by the factory specified</summary>
		/// <param name="relatedEntityType">The type of entity the fields are for</param>
		/// <returns>The IEntityFields instance requested</returns>
		public static IEntityFields2 CreateEntityFieldsObject(<[RootNamespace]>.EntityType relatedEntityType)
		{
			return FieldInfoProviderSingleton.GetInstance().GetEntityFields(InheritanceInfoProviderSingleton.GetInstance(), _entityTypeNamesCache[relatedEntityType]);
		}
		
		/// <summary>General method which will return an array of IEntityFieldCore objects, used by the InheritanceInfoProvider. Only the fields defined in the entity are returned, no inherited fields.</summary>
		/// <param name="entityName">the name of the entity to get the fields for. Example: "CustomerEntity"</param>
		/// <returns>array of IEntityFieldCore fields, defined in the entity with the name specified</returns>
		internal static IEntityFieldCore[] CreateFields(string entityName)
		{
			return FieldInfoProviderSingleton.GetInstance().GetEntityFieldsArray(entityName);
		}<[EndIf]>
<[If HasTypedView]>
		/// <summary>General factory entrance method which will return a TypedView EntityFields object with the format generated by the factory specified</summary>
		/// <param name="relatedTypedViewType">The type of typed view the fields are for</param>
		/// <returns>The IEntityFields2 instance requested</returns>
		public static IEntityFields2 CreateTypedViewEntityFieldsObject(TypedViewType relatedTypedViewType)
		{
			IEntityFields2 fieldsToReturn=null;
			switch(relatedTypedViewType)
			{<[Foreach TypedView]>
				case TypedViewType.<[CurrentTypedViewName]>TypedView:
					fieldsToReturn = Create<[CurrentTypedViewName]>TypedViewEntityFields();
					break;<[NextForeach]>
			}
			return fieldsToReturn;
		}<[EndIf]>
<[Foreach TypedView]>
		/// <summary>Creates a complete EntityFields instance for the <[CurrentTypedViewName]>Entity.</summary>
		private static IEntityFields2 Create<[CurrentTypedViewName]>TypedViewEntityFields()
		{
			IEntityFields2 fieldsToReturn = new EntityFields2((int)<[CurrentTypedViewName]>FieldIndex.AmountOfFields, null, FieldInfoProviderSingleton.GetInstance().GetFieldIndexes("<[CurrentTypedViewName]>TypedView"));
			for(int i=0;i<(int)<[CurrentTypedViewName]>FieldIndex.AmountOfFields;i++)
			{
				fieldsToReturn[i] = EntityFieldFactory.Create((<[CurrentTypedViewName]>FieldIndex)i);
			}
			return fieldsToReturn;
		}
<[NextForeach]>
		#region Included Code
<# Custom_EntityFieldsFactoryAdapterTemplate #>
		#endregion
	}
}
