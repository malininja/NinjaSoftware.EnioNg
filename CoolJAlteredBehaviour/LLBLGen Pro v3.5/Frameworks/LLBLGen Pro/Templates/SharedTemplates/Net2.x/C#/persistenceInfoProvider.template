///////////////////////////////////////////////////////////////
// This is generated code. 
//////////////////////////////////////////////////////////////
// Code is generated using LLBLGen Pro version: <[LLBLGenVersion]>
// Code is generated using templates: <[TemplateName]>
// Templates vendor: Solutions Design.
// Templates version: <[TemplateVersion]>
//////////////////////////////////////////////////////////////
using System;
using System.Collections;
using System.Data;
using SD.LLBLGen.Pro.ORMSupportClasses;

namespace <[RootNamespace]><[If StringValueEquals TemplateGroup "SelfServicing"]>.HelperClasses<[Else]><[If StringValueEquals TemplateGroup "Adapter"]><[DbSpecificNamespaceSuffix]><[EndIf]><[EndIf]>
{
	/// <summary>Singleton implementation of the PersistenceInfoProvider. This class is the singleton wrapper through which the actual instance is retrieved.</summary>
	/// <remarks>It uses a single instance of an internal class. The access isn't marked with locks as the PersistenceInfoProviderBase class is threadsafe.</remarks>
	internal static class PersistenceInfoProviderSingleton
	{
		#region Class Member Declarations
		private static readonly IPersistenceInfoProvider _providerInstance = new PersistenceInfoProviderCore();
		#endregion

		/// <summary>Dummy static constructor to make sure threadsafe initialization is performed.</summary>
		static PersistenceInfoProviderSingleton()
		{
		}

		/// <summary>Gets the singleton instance of the PersistenceInfoProviderCore</summary>
		/// <returns>Instance of the PersistenceInfoProvider.</returns>
		public static IPersistenceInfoProvider GetInstance()
		{
			return _providerInstance;
		}
	}

	/// <summary>Actual implementation of the PersistenceInfoProvider. Used by singleton wrapper.</summary>
	internal class PersistenceInfoProviderCore : PersistenceInfoProviderBase
	{
		/// <summary>Initializes a new instance of the <see cref="PersistenceInfoProviderCore"/> class.</summary>
		internal PersistenceInfoProviderCore()
		{
			Init();
		}

		/// <summary>Method which initializes the internal datastores with the structure of hierarchical types.</summary>
		private void Init()
		{
			this.InitClass((<[AmountOfElements Entity]> + <[AmountOfElements TypedView ]>));
<[Foreach Entity CrLf]>			Init<[CurrentEntityName]>EntityMappings();<[NextForeach]>
<[Foreach TypedView CrLf]>			Init<[CurrentTypedViewName]>TypedViewMappings();<[NextForeach]>
		}

<[Foreach Entity ]>
		/// <summary>Inits <[CurrentEntityName]>Entity's mappings</summary>
		private void Init<[CurrentEntityName]>EntityMappings()
		{
			this.AddElementMapping( "<[CurrentEntityName]>Entity", @"<[ElementTargetCatalogName]>", @"<[ElementTargetSchemaName]>", "<[ElementTargetObjectName]>", <[AmountOfEntityFields]> );
<[ If IsInHierarchyType TargetPerEntity]><[Foreach EntityField IncludeInheritedPk CrLf]>			this.AddElementFieldMapping( "<[CurrentEntityName]>Entity", "<[EntityFieldName]>", "<[SourceColumnName]>", <[SourceColumnIsNullable]>, "<[SourceColumnDbType]>", <[SourceColumnMaxLength]>, <[SourceColumnScale]>, <[SourceColumnPrecision]>, <[IsIdentity]>, "<[IdentityValueSequenceName]>", <[If HasTypeConverterDefined]> new <[TypeConverterFullName]>()<[Else]>null<[EndIf]>, typeof(<[TypeOfMappedTargetField]>), <[ FieldIndex ]> );<[NextForeach]><[Else]><[If HasFields]><[Foreach EntityField IncludeInheritedPk CrLf]>			this.AddElementFieldMapping( "<[CurrentEntityName]>Entity", "<[EntityFieldName]>", "<[SourceColumnName]>", <[SourceColumnIsNullable]>, "<[SourceColumnDbType]>", <[SourceColumnMaxLength]>, <[SourceColumnScale]>, <[SourceColumnPrecision]>, <[IsIdentity]>, "<[IdentityValueSequenceName]>", <[If HasTypeConverterDefined]> new <[TypeConverterFullName]>()<[Else]>null<[EndIf]>, typeof(<[TypeOfMappedTargetField]>), <[ FieldIndex ]> );<[NextForeach]><[EndIf]><[EndIf]>
		}<[NextForeach]>
<[Foreach TypedView]>
		/// <summary>Inits <[CurrentEntityName]>View's mappings</summary>
		private void Init<[CurrentTypedViewName]>TypedViewMappings()
		{
			this.AddElementMapping( "<[CurrentTypedViewName]>TypedView", @"<[ElementTargetCatalogName]>", @"<[ElementTargetSchemaName]>", "<[ElementTargetObjectName]>", <[AmountOfTypedViewFields]> );
<[If HasFields]><[Foreach TypedViewField CrLf]>			this.AddElementFieldMapping( "<[CurrentTypedViewName]>TypedView", "<[TypedViewFieldName]>", "<[SourceColumnName]>", false, "<[SourceColumnDbType]>", <[SourceColumnMaxLength]>, <[SourceColumnScale]>, <[SourceColumnPrecision]>,false, string.Empty, <[If HasTypeConverterDefined]> new <[TypeConverterFullName]>()<[Else]>null<[EndIf]>, typeof(<[TypeOfMappedTargetField]>), <[ FieldIndex ]> );<[NextForeach]><[EndIf]>
		}<[NextForeach]>
	}
}