///////////////////////////////////////////////////////////////
// This is generated code. 
//////////////////////////////////////////////////////////////
// Code is generated using LLBLGen Pro version: <[LLBLGenVersion]>
// Code is generated using templates: <[TemplateName]>
// Templates vendor: Solutions Design.
// Templates version: <[TemplateVersion]>
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
#if !CF
using System.Runtime.Serialization;
#endif
using System.Xml.Serialization;
using <[RootNamespace]>;
using <[RootNamespace]>.HelperClasses;
using <[RootNamespace]>.FactoryClasses;
using <[RootNamespace]>.RelationClasses;
<[Foreach AdditionalNamespace CrLf]>using <[CurrentAdditionalNamespace]>;<[NextForeach]>
using SD.LLBLGen.Pro.ORMSupportClasses;
using Newtonsoft.Json;
using NinjaSoftware.Api.CoolJ;

namespace <[RootNamespace]>.EntityClasses
{<[ UserCodeRegion "AdditionalNamespaces" ]>
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	<[ EndUserCodeRegion ]>
	/// <summary>Entity class which represents the entity '<[CurrentEntityName]>'.<br/><br/><[Foreach CustomProperty Entity]>
	/// <[CustomPropertyName]>: <[CustomPropertyValue]><br/><[NextForeach]></summary>
	[Serializable]
	[JsonObject(MemberSerialization.OptIn)]	<[Foreach Attribute Entity]>
	<[Attribute]><[NextForeach]>
	public <[If UsePartialClasses]>partial <[EndIf]>class <[CurrentEntityName]>Entity : <[ If IsSubType ]><[ SuperTypeName ]>Entity<[ Else ]><[SettingValue Entity "EntityBaseClassName"]><[ EndIf ]><[Foreach AdditionalInterface]>, <[CurrentAdditionalInterface]><[NextForeach]><[ UserCodeRegion "AdditionalInterfaces" ]>
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END
		<[ EndUserCodeRegion ]>	
	{
		#region Class Member Declarations
<[Foreach RelatedEntity OneToMany]><[If Not MappedFieldRelationIsHidden]>		private EntityCollection<<[RelatedEntityName]>Entity> _<[CaseCamel MappedFieldNameRelation]>;
<[EndIf]><[NextForeach]><[Foreach RelatedEntity ManyToMany]><[If Not MappedFieldRelationIsHidden]>		private EntityCollection<<[RelatedEntityName]>Entity> _<[CaseCamel MappedFieldNameRelation]>;
<[EndIf]><[NextForeach]><[Foreach RelatedEntity ManyToOne]><[If Not MappedFieldRelationIsHidden]>		private <[RelatedEntityName]>Entity _<[CaseCamel MappedFieldNameRelation]>;
<[EndIf]><[NextForeach]><[Foreach RelatedEntity OneToOne]><[If Not MappedFieldRelationIsHidden]>		private <[RelatedEntityName]>Entity _<[CaseCamel MappedFieldNameRelation]>;
<[EndIf]><[NextForeach]><[ UserCodeRegion "PrivateMembers" ]>
		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		<[ EndUserCodeRegion ]>
		#endregion

		#region Statics
		private static Dictionary<string, string>	_customProperties;
		private static Dictionary<string, Dictionary<string, string>>	_fieldsCustomProperties;

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static <[If IsSubType]>new <[EndIf]><[If UsePartialClasses]>partial <[EndIf]>class MemberNames
		{
<[Foreach RelatedEntity ManyToOne IncludeInherited]><[If Not MappedFieldRelationIsHidden]>			/// <summary>Member name <[MappedFieldNameRelation]></summary>
			public static readonly string <[MappedFieldNameRelation]> = "<[MappedFieldNameRelation]>";
<[EndIf]><[NextForeach]><[Foreach RelatedEntity OneToMany IncludeInherited]><[If Not MappedFieldRelationIsHidden]>			/// <summary>Member name <[MappedFieldNameRelation]></summary>
			public static readonly string <[MappedFieldNameRelation]> = "<[MappedFieldNameRelation]>";
<[EndIf]><[NextForeach]><[Foreach RelatedEntity ManyToMany IncludeInherited]><[If Not MappedFieldRelationIsHidden]>			/// <summary>Member name <[MappedFieldNameRelation]></summary>
			public static readonly string <[MappedFieldNameRelation]> = "<[MappedFieldNameRelation]>";
<[EndIf]><[NextForeach]><[Foreach RelatedEntity OneToOne IncludeInherited]><[If Not MappedFieldRelationIsHidden]>			/// <summary>Member name <[MappedFieldNameRelation]></summary>
			public static readonly string <[MappedFieldNameRelation]> = "<[MappedFieldNameRelation]>";
<[EndIf]><[NextForeach]>		}

        /// <summary>
		/// Returns number of entities after filterBucket is applied.
		/// If you need number of all entities send null as filterBucket.
        /// </summary>
		public static int GetNumberOfEntities(DataAccessAdapterBase adapter, 
			IRelationPredicateBucket filterBucket)
		{
			EntityCollection entityCollection = new EntityCollection(new <[CurrentEntityName]>EntityFactory());
			return adapter.GetDbCount(entityCollection, filterBucket);
		}
		
		/// <summary>
        /// Efficient pageing for grid.
        /// </summary>
        /// <param name="pageNumber">Must be greater than zero.</param>
        /// <param name="sortDirection">Validne vrijednosti su 'asc' i 'desc'.</param>
        public static EntityCollection<<[CurrentEntityName]>Entity> Fetch<[CurrentEntityName]>CollectionForPaging(DataAccessAdapterBase adapter,
			RelationPredicateBucket bucket,
			PrefetchPath2 prefetchPath,
            int pageNumber,
            int pageSize,
            string sortField,
			bool isSortAscending)
        {
			string sortDirection = isSortAscending ? "asc" : "desc";

            Type sortEntityFieldType = typeof(<[CurrentEntityName]>Fields);
            string sortEntityFieldTypeName = SortHelper.GetEntityFieldTypeNameForSorting(sortField, sortEntityFieldType);
            if (!string.IsNullOrWhiteSpace(sortEntityFieldTypeName))
            {
                sortEntityFieldType = Type.GetType(sortEntityFieldTypeName);
            }

            sortField = SortHelper.GetSortField(sortField);			

			SortExpression sort = SortHelper.GetSortExpression(sortField, sortDirection, sortEntityFieldType);
			
            EntityCollection<<[CurrentEntityName]>Entity> toReturn = new EntityCollection<<[CurrentEntityName]>Entity>(new <[CurrentEntityName]>EntityFactory());
            adapter.FetchEntityCollection(toReturn, bucket, pageSize, sort, prefetchPath, pageNumber, pageSize);

            return toReturn;
        }
		
		public static EntityCollection<<[CurrentEntityName]>Entity> Fetch<[CurrentEntityName]>Collection(DataAccessAdapterBase adapter,
			IRelationPredicateBucket filterBucket,
			PrefetchPath2 prefetchPath)
		{
			EntityCollection<<[CurrentEntityName]>Entity> toReturn = new EntityCollection<<[CurrentEntityName]>Entity>(new <[CurrentEntityName]>EntityFactory());
			adapter.FetchEntityCollection(toReturn, filterBucket, prefetchPath);
			return toReturn;
		}
		
		public static <[CurrentEntityName]>Entity Fetch<[CurrentEntityName]>(DataAccessAdapterBase adapter, PrefetchPath2 prefetchPath, long <[CurrentEntityName]>Id)
		{
			<[CurrentEntityName]>Entity _<[CurrentEntityName]>Entity = new <[CurrentEntityName]>Entity(<[CurrentEntityName]>Id);
			adapter.FetchEntity(_<[CurrentEntityName]>Entity, prefetchPath);
			return _<[CurrentEntityName]>Entity;
		}

		#endregion
		
		/// <summary> Static CTor for setting up custom property hashtables. Is executed before the first instance of this entity class or derived classes is constructed. </summary>
		static <[CurrentEntityName]>Entity()
		{
			SetupCustomPropertyHashtables();
		}
		
		/// <summary> CTor</summary>
		<[If IsAbstract]>internal<[Else]>public<[EndIf]> <[CurrentEntityName]>Entity()<[If Not IsSubType]>:base("<[CurrentEntityName]>Entity")<[EndIf]>
		{
			InitClassEmpty(<[If Not IsSubType]>null, null<[EndIf]>);
<[If IsSubType]>			SetName("<[CurrentEntityName]>Entity");
<[EndIf]>		}

		/// <summary> CTor</summary>
		/// <remarks>For framework usage.</remarks>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		<[If IsAbstract]>internal<[Else]>public<[EndIf]> <[CurrentEntityName]>Entity(IEntityFields2 fields):base(<[If IsSubType]>fields<[Else]>"<[CurrentEntityName]>Entity"<[EndIf]>)
		{
			InitClassEmpty(<[If Not IsSubType]>null, fields<[EndIf]>);
<[If IsSubType]>			SetName("<[CurrentEntityName]>Entity");
<[EndIf]>		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this <[CurrentEntityName]>Entity</param>
		<[If IsAbstract]>internal<[Else]>public<[EndIf]> <[CurrentEntityName]>Entity(IValidator validator):base(<[If IsSubType]>validator<[Else]>"<[CurrentEntityName]>Entity"<[EndIf]>)
		{
			InitClassEmpty(<[If Not IsSubType]>validator, null<[EndIf]>);
<[If IsSubType]>			SetName("<[CurrentEntityName]>Entity");
<[EndIf]>		}
				
<[If HasPrimaryKey]>		/// <summary> CTor</summary>
<[Foreach PrimaryKeyEntityField CrLf]>		/// <param name="<[CaseCamel EntityFieldName]>">PK value for <[CurrentEntityName]> which data should be fetched into this <[CurrentEntityName]> object</param><[NextForeach]>
		/// <remarks>The entity is not fetched by this constructor. Use a DataAccessAdapter for that.</remarks>
		<[If IsAbstract]>internal<[Else]>public<[EndIf]> <[CurrentEntityName]>Entity(<[Foreach PrimaryKeyEntityField Comma]><[If GenerateAsNullableType]>Nullable<<[TypeOfField]>><[Else]><[TypeOfField]><[EndIf]> <[CaseCamel EntityFieldName]><[NextForeach]>):base(<[If IsSubType]><[Foreach PrimaryKeyEntityField Comma]><[CaseCamel EntityFieldName]><[NextForeach]><[Else]>"<[CurrentEntityName]>Entity"<[EndIf]>)
		{
			InitClassEmpty(<[If Not IsSubType]>null, null<[EndIf]>);
<[If Not IsSubType]><[Foreach PrimaryKeyEntityField CrLf]>			this.<[EntityFieldName]> = <[CaseCamel EntityFieldName]>;<[NextForeach]><[EndIf]>
<[If IsSubType]>			SetName("<[CurrentEntityName]>Entity");
<[EndIf]>		}

		/// <summary> CTor</summary>
<[Foreach PrimaryKeyEntityField CrLf]>		/// <param name="<[CaseCamel EntityFieldName]>">PK value for <[CurrentEntityName]> which data should be fetched into this <[CurrentEntityName]> object</param><[NextForeach]>
		/// <param name="validator">The custom validator object for this <[CurrentEntityName]>Entity</param>
		/// <remarks>The entity is not fetched by this constructor. Use a DataAccessAdapter for that.</remarks>
		<[If IsAbstract]>internal<[Else]>public<[EndIf]> <[CurrentEntityName]>Entity(<[Foreach PrimaryKeyEntityField Comma]><[If GenerateAsNullableType]>Nullable<<[TypeOfField]>><[Else]><[TypeOfField]><[EndIf]> <[CaseCamel EntityFieldName]><[NextForeach]>, IValidator validator):base(<[If IsSubType]><[Foreach PrimaryKeyEntityField Comma]><[CaseCamel EntityFieldName]><[NextForeach]>, validator<[Else]>"<[CurrentEntityName]>Entity"<[EndIf]>)
		{
			InitClassEmpty(<[If Not IsSubType]>validator, null<[EndIf]>);
<[If Not IsSubType]><[Foreach PrimaryKeyEntityField CrLf]>			this.<[EntityFieldName]> = <[CaseCamel EntityFieldName]>;<[NextForeach]><[EndIf]>
<[If IsSubType]>			SetName("<[CurrentEntityName]>Entity");
<[EndIf]>		}<[EndIf]>

		/// <summary> Protected CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		[EditorBrowsable(EditorBrowsableState.Never)]
		protected <[CurrentEntityName]>Entity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			if(SerializationHelper.Optimization != SerializationOptimization.Fast) 
			{
<[Foreach RelatedEntity OneToMany]><[If Not MappedFieldRelationIsHidden]>				_<[CaseCamel MappedFieldNameRelation]> = (EntityCollection<<[RelatedEntityName]>Entity>)info.GetValue("_<[CaseCamel MappedFieldNameRelation]>", typeof(EntityCollection<<[RelatedEntityName]>Entity>));
<[EndIf]><[NextForeach]><[Foreach RelatedEntity ManyToMany]><[If Not MappedFieldRelationIsHidden]>				_<[CaseCamel MappedFieldNameRelation]> = (EntityCollection<<[RelatedEntityName]>Entity>)info.GetValue("_<[CaseCamel MappedFieldNameRelation]>", typeof(EntityCollection<<[RelatedEntityName]>Entity>));
<[EndIf]><[NextForeach]><[Foreach RelatedEntity ManyToOne]><[If Not MappedFieldRelationIsHidden]>				_<[CaseCamel MappedFieldNameRelation]> = (<[RelatedEntityName]>Entity)info.GetValue("_<[CaseCamel MappedFieldNameRelation]>", typeof(<[RelatedEntityName]>Entity));
				if(_<[CaseCamel MappedFieldNameRelation]>!=null)
				{
					_<[CaseCamel MappedFieldNameRelation]>.AfterSave+=new EventHandler(OnEntityAfterSave);
				}
<[EndIf]><[NextForeach]><[Foreach RelatedEntity OneToOne]><[If Not MappedFieldRelationIsHidden]>				_<[CaseCamel MappedFieldNameRelation]> = (<[RelatedEntityName]>Entity)info.GetValue("_<[CaseCamel MappedFieldNameRelation]>", typeof(<[RelatedEntityName]>Entity));
				if(_<[CaseCamel MappedFieldNameRelation]>!=null)
				{
					_<[CaseCamel MappedFieldNameRelation]>.AfterSave+=new EventHandler(OnEntityAfterSave);
				}
<[EndIf]><[NextForeach]><[ If Not IsSubType]>				this.FixupDeserialization(FieldInfoProviderSingleton.GetInstance());<[Else]><[If Not IsSuperType]>				this.FixupDeserialization(FieldInfoProviderSingleton.GetInstance());<[EndIf]><[EndIf]>
			}<[ UserCodeRegion "DeserializationConstructor" ]>
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
			<[ EndUserCodeRegion ]>
		}

<# SD_EntityIncludeAdapterTemplate #>

		#region Custom Entity code
		<[ UserCodeRegion "CustomEntityCode" ]>
		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END
		<[ EndUserCodeRegion ]>
		#endregion

		#region Included code
<# Custom_EntityAdapterTemplate #>
		#endregion
	}
}
